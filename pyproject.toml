[build-system]
requires = ["setuptools>=70", "wheel", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "the-lazy-one"
dynamic = ["version"]
description = "AI-powered MCP server for automated code development with Claude Code integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Maruthi Prithivi", email = "maruthiprithivi@gmail.com"}
]
keywords = ["mcp", "ai", "claude", "code-generation", "automation", "moonshot", "openai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "openai>=1.0.0",
    "markdown>=3.4.0",
    "aiodocker>=0.21.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.24.0",
    "jinja2>=3.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "python-semantic-release>=8.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]

[project.urls]
Homepage = "https://github.com/maruthiprithivi/thelazyone"
Repository = "https://github.com/maruthiprithivi/thelazyone"
Documentation = "https://github.com/maruthiprithivi/thelazyone#readme"
"Bug Tracker" = "https://github.com/maruthiprithivi/thelazyone/issues"
Changelog = "https://github.com/maruthiprithivi/thelazyone/blob/main/CHANGELOG.md"
"Discussions" = "https://github.com/maruthiprithivi/thelazyone/discussions"

[project.scripts]
thelazyone = "mcp_server.cli:main"
thelazyone-server = "mcp_server.server:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"mcp_server" = ["*.yaml", "*.json", "*.md"]

[tool.setuptools_scm]
write_to = "src/mcp_server/_version.py"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"tests/*" = ["B011", "ARG001", "ARG002", "PLR2004"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["mcp_server"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "aiodocker.*",
    "docker.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.semantic_release]
version_variable = "src/mcp_server/__init__.py:__version__"
branch = "main"
upload_to_pypi = false
build_command = "python -m build"
commit_message = "chore(release): {version} [skip ci]"
changelog_file = "CHANGELOG.md"
changelog_placeholder = "<!--- generated by python-semantic-release -->"

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^Merge pull request",
    "^chore\(release\)",
]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false